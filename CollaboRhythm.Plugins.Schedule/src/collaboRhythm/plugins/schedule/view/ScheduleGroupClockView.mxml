<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 width="100%" height="100%"
		 creationComplete="creationCompleteHandler()"
		 mouseEnabledWhereTransparent="false"
		 remove="removeHandler()"
		 mouseDown="mouseDownHandler()"
		 mouseOut="mouseOutHandler()"
		 click="clickHandler()">
	<fx:Declarations>
			<s:GlowFilter id="glowFilter" inner="true" blurX="50" blurY="50" color="0x0167FF"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
		import collaboRhythm.plugins.schedule.model.ScheduleModel;
		import collaboRhythm.plugins.schedule.shared.model.ScheduleGroup;
		import collaboRhythm.shared.model.healthRecord.document.ScheduleItemOccurrence;

		import com.leebrimelow.drawing.Wedge;

		import mx.binding.utils.BindingUtils;
		import mx.binding.utils.ChangeWatcher;
		import mx.collections.ArrayCollection;
		import mx.events.CollectionEvent;
		import mx.events.CollectionEventKind;

		import spark.components.Group;
		import spark.components.Image;
		import spark.skins.spark.ImageSkin;

		private var _scheduleModel:ScheduleModel;
		[Bindable]
		private var _scheduleGroup:ScheduleGroup;
		[Bindable]
		private var _scheduleGroupsContainer:Group;
		private var _scheduleItemsCollection:ArrayCollection;
		private var _scheduleItemClockViews:Vector.<ScheduleItemOccurrenceClockView> = new Vector.<ScheduleItemOccurrenceClockView>;

		private var _changeWatchers:Vector.<ChangeWatcher> = new Vector.<ChangeWatcher>();

		private var _isCreationComplete:Boolean = false;
		private var _isReducedClockView:Boolean = true;

		[Embed (source="/assets/images/pill.png" )]
  		public static const pillImage:Class;
	
		[Embed (source="/assets/images/chart.png")]
		public static const chartImage:Class;

		[Embed (source="/assets/images/bathroom.png" )]
  		public static const bathroomImage:Class;
		
		[Embed (source="/assets/images/bathroom pill.png" )]
  		public static const bathroomPillImage:Class;
		
		[Embed (source="/assets/images/chartpill.png" )]
  		public static const chartPillImage:Class;

		public function init(scheduleModel:ScheduleModel, scheduleGroup:ScheduleGroup,
							 scheduleGroupsContainer:Group):void
		{
			_scheduleModel = scheduleModel;
			_scheduleGroup = scheduleGroup;
			_scheduleGroupsContainer = scheduleGroupsContainer;
			_scheduleItemsCollection = scheduleGroup.scheduleItemsOccurrencesCollection;

			_scheduleItemsCollection.addEventListener(CollectionEvent.COLLECTION_CHANGE,
					scheduleItemsCollectionChangeHandler, false, 0, true);

			_changeWatchers.push(BindingUtils.bindSetter(sizeChangeHandler, _scheduleGroup,
					"dateStart"));
			_changeWatchers.push(BindingUtils.bindSetter(sizeChangeHandler, _scheduleGroup,
					"dateEnd"));
			_changeWatchers.push(BindingUtils.bindSetter(sizeChangeHandler, _scheduleGroupsContainer,
					"width"));
			_changeWatchers.push(BindingUtils.bindSetter(sizeChangeHandler, _scheduleGroupsContainer,
					"height"));
			_changeWatchers.push(BindingUtils.bindSetter(stackingUpdateHandler,
					_scheduleGroup, "stackingUpdated"));
		}

		private function creationCompleteHandler():void
		{
			if(_isReducedClockView){
				processReducedScheduleItemClockView();
			}
			else{
				for each (var scheduleItemOccurrence:ScheduleItemOccurrence in _scheduleItemsCollection)
				{
					createScheduleItemClockView(scheduleItemOccurrence);
				}
			}
			_isCreationComplete = true;

			updateView();
		}

		public function get scheduleGroup():ScheduleGroup
		{
			return _scheduleGroup;
		}

		public function scheduleItemsCollectionChangeHandler(event:CollectionEvent):void
		{
			if(_isReducedClockView){
				if(event.kind == CollectionEventKind.ADD || event.kind == CollectionEventKind.REMOVE){
					processReducedScheduleItemClockView();
				}
			}
			else{
				if (event.kind == CollectionEventKind.ADD)
				{
					if (_isCreationComplete)
					{
						for each (var scheduleItemOccurrenceAdded:ScheduleItemOccurrence in event.items)
						{
							createScheduleItemClockView(scheduleItemOccurrenceAdded);
						}
					}
				}
				else if (event.kind == CollectionEventKind.REMOVE)
				{
					for each (var scheduleItemOccurrenceRemoved:ScheduleItemOccurrence in event.items)
					{
						destroyScheduleItemClockView(scheduleItemOccurrenceRemoved);
					}
				}
			}
			updateView();
		}

		public function processReducedScheduleItemClockView():void
		{
			scheduleItemOccurrencesContainer.removeAllElements();
			var reducedScheduleItemOccurrenceClockView:ScheduleItemOccurrenceClockView = new ScheduleItemOccurrenceClockView();
			var containsMeds:Boolean = false;
			var containsDoc:Boolean = false;
			var containsBathroom:Boolean = false;
			
			for each (var scheduleItemOccurrence:ScheduleItemOccurrence in _scheduleItemsCollection)
			{
				var scheduleItemOccurrenceClockView:ScheduleItemOccurrenceClockView = new ScheduleItemOccurrenceClockView();
				scheduleItemOccurrenceClockView.init(scheduleItemOccurrence, _scheduleModel);

				// TODO: currently adding any scheduleItemOccurrence to the reducedScheduleItemOccurenceClockView to handle adherence
				// Need to make some kind of master item to handle adherence
				reducedScheduleItemOccurrenceClockView.scheduleItemOccurrence = scheduleItemOccurrence;

				var type:String = scheduleItemOccurrenceClockView.scheduleItemViewAdapterType;
				switch(type){
					case "Medication":
						containsMeds = true;
						break;
					case "Bathroom":
						containsBathroom = true;
						break;
					case "Pain Report":
						containsDoc = true;
						break;
					case "Intake":
						containsDoc = true;
						break;
					case "Equipment": // for testing purposes with existing data
						containsBathroom = true;
						break;
					default:
						break;
				}


				trace("type: " + type);
			}

			// only push 1 view to represent all items
			var image:Image = new Image();
			image.setStyle("skinClass", ImageSkin);

			if(containsMeds){
				if(containsDoc){
					image.source = chartPillImage;
				}
				else if(containsBathroom){
					image.source = bathroomPillImage;
				}
				else{
					image.source = pillImage;
				}
			}
			else if(containsBathroom){
				if(containsDoc){
					image.source = chartImage;
				}
				else{
					image.source = bathroomImage;
				}
			}
			else{
				image.source = chartImage;
			}

			reducedScheduleItemOccurrenceClockView.initImage(image);
			scheduleItemOccurrencesContainer.addElement(reducedScheduleItemOccurrenceClockView);
			_scheduleItemClockViews.push(reducedScheduleItemOccurrenceClockView);
		}

		public function createScheduleItemClockView(scheduleItemOccurrence:ScheduleItemOccurrence):void
		{
			var scheduleItemOccurrenceClockView:ScheduleItemOccurrenceClockView = new ScheduleItemOccurrenceClockView();
			scheduleItemOccurrenceClockView.init(scheduleItemOccurrence, _scheduleModel);
			scheduleItemOccurrencesContainer.addElement(scheduleItemOccurrenceClockView);
			_scheduleItemClockViews.push(scheduleItemOccurrenceClockView);
		}

		public function destroyScheduleItemClockView(scheduleItemOccurrence:ScheduleItemOccurrence):void
		{
			for each (var scheduleItemOccurrenceClockView:ScheduleItemOccurrenceClockView in _scheduleItemClockViews)
			{
				if (scheduleItemOccurrenceClockView.scheduleItemOccurrence == scheduleItemOccurrence)
				{
					var scheduleItemClockViewIndex:int = _scheduleItemClockViews.indexOf(scheduleItemOccurrenceClockView);
					_scheduleItemClockViews.splice(scheduleItemClockViewIndex, 1);
					scheduleItemOccurrencesContainer.removeElement(scheduleItemOccurrenceClockView);
				}
			}
		}

		private function stackingUpdateHandler(stackingUpdated:Boolean):void
		{
			if (stackingUpdated && _isCreationComplete)
			{
				updateView();
			}
		}

		private function sizeChangeHandler(change:Number):void
		{
			if (_isCreationComplete)
			{
				updateView();
			}
		}

		private function updateView():void
		{
			var startAngle:Number = calculateAngleFromDate(_scheduleGroup.dateStart);
			var endAngle:Number = calculateAngleFromDate(_scheduleGroup.dateEnd);

			drawScheduleGroup(startAngle, endAngle);

			var scheduleItemSize:Number = _scheduleGroupsContainer.height / 10;
			var scheduleItemPositions:Array = determineScheduleItemPositions(scheduleItemSize, startAngle, endAngle);

			for each (var scheduleItemOccurrenceClockView:ScheduleItemOccurrenceClockView in _scheduleItemClockViews)
			{
				scheduleItemOccurrenceClockView.width = scheduleItemOccurrenceClockView.height = scheduleItemSize;
				if (scheduleItemPositions.length > 0)
				{
					var scheduleItemPosition:Array = scheduleItemPositions.pop();
					scheduleItemOccurrenceClockView.x = scheduleItemPosition[0];
					scheduleItemOccurrenceClockView.y = scheduleItemPosition[1];
				}
			}
		}

		private function drawScheduleGroup(startAngle:Number, endAngle:Number):void
		{
			var arc:Number = endAngle - startAngle;

			scheduleGroupWedge.graphics.clear();
			scheduleGroupWedge.graphics.beginFill(0xFFFFFF, 0.5);
			Wedge.draw(scheduleGroupWedge, _scheduleGroupsContainer.width / 2, _scheduleGroupsContainer.width / 2,
					_scheduleGroupsContainer.width / 2 - 1, arc, startAngle - 90);
			scheduleGroupWedge.graphics.endFill();
		}

		private function calculateAngleFromDate(date:Date):Number
		{
			return 15 * date.hours + 0.25 * date.minutes;
		}

		private function determineScheduleItemPositions(scheduleItemSize:Number, startAngle:Number,
														endAngle:Number):Array
		{
			startAngle += 15;
			var positionAngle:Number;
			var totalAngle:Number = 15;
			var coordinates:Array;
			var row1:Array = new Array();
			var row2:Array = new Array();
			var row3:Array = new Array();
			var scheduleItemPositions:Array = new Array();

			for (var currentAngle:Number = startAngle; currentAngle <= endAngle; currentAngle += 15)
			{
				positionAngle = currentAngle - 7.5;
				coordinates = calculateCoordinates(positionAngle, scheduleItemSize * 4.25, scheduleItemSize);
				row1.push(coordinates);
				if (totalAngle % 30 == 0)
				{
					positionAngle = currentAngle - 15;
					coordinates = calculateCoordinates(positionAngle, scheduleItemSize * 2.75, scheduleItemSize);
					row2.push(coordinates);
				}
				if (totalAngle % 60 == 0)
				{
					positionAngle = currentAngle - 30;
					coordinates = calculateCoordinates(positionAngle, scheduleItemSize * 1.5, scheduleItemSize);
					row3.push(coordinates);
				}
				totalAngle += 15;
			}
			scheduleItemPositions = row1.concat(row2);
			scheduleItemPositions = scheduleItemPositions.concat(row3);

			return scheduleItemPositions;
		}

		private function calculateCoordinates(angle:Number, radius:Number, scheduleItemSize:Number):Array
		{
			var radians:Number = angle * (Math.PI / 180);
			var x:Number = radius * Math.sin(radians) + _scheduleGroupsContainer.width / 2 - scheduleItemSize / 2;
			var y:Number = -radius * Math.cos(radians) + _scheduleGroupsContainer.height / 2 - scheduleItemSize / 2;
			var coordinates:Array = [x, y];

			return coordinates
		}

		private function mouseDownHandler():void
		{
			scheduleGroupWedge.filters = [glowFilter];
		}

		private function mouseOutHandler():void
		{
			scheduleGroupWedge.filters = [];
		}

		private function clickHandler():void
		{
			dispatchEvent(new ScheduleClockWidgetViewEvent(ScheduleClockWidgetViewEvent.SCHEDULE_GROUP_CLOCK_VIEW_CLICK,
					_scheduleGroup));
		}

		private function removeHandler():void
		{
			_scheduleItemsCollection.removeEventListener(CollectionEvent.COLLECTION_CHANGE,
					scheduleItemsCollectionChangeHandler);
			for each (var changeWatcher:ChangeWatcher in _changeWatchers)
			{
				changeWatcher.unwatch();
			}

		}
		]]>
	</fx:Script>
	<s:Group id="scheduleGroupWedge" width="100%" height="100%"/>
	<s:Group id="scheduleItemOccurrencesContainer" width="100%" height="100%"/>
</s:Group>