<?xml version="1.0"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.

This code is based in part on code by Brendan Meutzner.

Portions Copyright (c) 2007 Brendan Meutzner

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

  -->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:mccune="com.dougmccune.controls.*" xmlns:skins="skins.*"
			 xmlns:datashapes="qs.charts.dataShapes.*"
			 width="1024"
			 height="600"
			 styleName="scrubChartSkinStyle"
		>
	<s:layout>
		<mccune:ChildIndependentLayout/>
	</s:layout>

	<fx:Declarations>
		<s:Fade id="highlightChartItemEffect" target="{highlightChartItemGroup}" alphaFrom="1" alphaTo="0" startDelay="500" effectEnd="{highlightChartItemGroup.visible = false}"/>
	</fx:Declarations>

	<!-- host component -->
	<fx:Metadata>
	<![CDATA[
		/**
		 * @copy spark.skins.spark.ApplicationSkin#hostComponent
		 */
		[HostComponent("com.dougmccune.controls.ScrubChart")]
	]]>
	</fx:Metadata>

<!--
	<fx:Style source="/defaults.css" />
-->

	<s:states>
		<s:State name="hideAnnotationControls"/>
		<s:State name="showAnnotationControls"/>
	</s:states>
	
	<mx:Canvas id="mainChartContainer"
			   x="{SLIDER_SCROLL_BUTTON_WIDTH}"
			   width="{this.width - SLIDER_SCROLL_BUTTON_WIDTH * 2}"
			   height="{this.height}"
			   horizontalScrollPolicy="off" verticalScrollPolicy="off"
			   styleName="canvasContainerStyles"
			   borderStyle="none"
			   >
		<mx:LineChart id="mainChart"
					  x="0" y="0"
					  showDataTips="true"
					  width="{mainChartContainer.width * 3}" height="{mainChartContainer.height}"
					  styleName="mainChartStyle"
					  seriesFilters="[]"
					  horizontalAxisStyleNames="mainChartHorizontalAxisStyle"
					  verticalAxisStyleNames="mainChartVerticalAxisStyle"
					  selectionMode="none"
					  cacheAsBitmap="true"
					  >
			<mx:backgroundElements>
				<datashapes:DataDrawingCanvas id="mainDataDrawingCanvas" includeInRanges="true" width="100%" height="100%">
					<s:Label id="goalZoneLabel" styleName="ZoneLabel" visible="false" text="Goal Range"/>
				</datashapes:DataDrawingCanvas>
			</mx:backgroundElements>

			<mx:horizontalAxis>
				<mccune:InclusiveDateTimeAxis id="mainChartHorizontalAxis" dataUnits="milliseconds"
								 disabledDays="[]" displayLocalTime="true"
								 />
			</mx:horizontalAxis>

			<mx:horizontalAxisRenderers>
				<mccune:BlankAxisRenderer axis="{mainChartHorizontalAxis}"/>
			</mx:horizontalAxisRenderers>

			<mx:verticalAxis>
				<mx:LinearAxis id="mainChartVerticalAxis" baseAtZero="false"/>
			</mx:verticalAxis>

			<mx:verticalAxisRenderers>
				<mccune:BlankAxisRenderer axis="{mainChartVerticalAxis}"/>
			</mx:verticalAxisRenderers>

			<mx:annotationElements>
				<!-- Skin part to receive mouse events for scrolling the main chart -->
				<mx:Canvas id="mainChartArea" width="100%" height="100%" buttonMode="true" mouseEnabled="true"
						   />

				<mx:Canvas id="annotationCanvas" width="100%" height="100%"
						   horizontalScrollPolicy="off" verticalScrollPolicy="off"/>
				<s:Group width="100%" height="100%">
					<s:Label id="fpsDisplay" right="0" text="FPS: ???" visible="false" styleName="MainChartTitleLabel">
					</s:Label>
				</s:Group>

				<!-- annotations for highlighting a selected data point	-->
				<s:Group id="highlightChartItemGroup" width="100%" height="100%" visible="false">
					<s:Ellipse id="highlightChartItemBullsEye" width="30" height="30">
						<s:filters>
							<s:GlowFilter id="highlightChartItemBullsEyeGlow" blurX="8" blurY="8" color="0x88FF88" quality="2" strength="4"/>
						</s:filters>
						<s:stroke>
							<s:SolidColorStroke color="0x000033" weight="3"/>
						</s:stroke>
					</s:Ellipse>
				</s:Group>
			</mx:annotationElements>

		</mx:LineChart>
		<s:Label id="titleDisplay" styleName="MainChartTitleLabel" mouseEnabled="false">
			<s:filters>
				<s:GlowFilter id="glow" blurX="12" blurY="12" color="#FFFFFF" quality="2" strength="4"/>
			</s:filters>
		</s:Label>

		<!-- mainChart border lines -->
		<s:Group height="100%" width="100%">
			<s:Line left="0" top="0" bottom="0">
				<s:stroke>
					<s:SolidColorStroke/>
				</s:stroke>
			</s:Line>
			<s:Line x="{mainChartContainer.width - 1}" top="0" bottom="0">
				<s:stroke>
					<s:SolidColorStroke/>
				</s:stroke>
			</s:Line>
			<s:Line id="topBorderLine" top="0" left="0" right="0">
				<s:stroke>
					<s:SolidColorStroke/>
				</s:stroke>
			</s:Line>
			<s:Line bottom="0" left="0" right="0">
				<s:stroke>
					<s:SolidColorStroke/>
				</s:stroke>
			</s:Line>
		</s:Group>

	</mx:Canvas> <!-- end mainChartContainer -->



	<fx:Script><![CDATA[
		import mx.core.UIComponent;
		import mx.events.ResizeEvent;
		import mx.graphics.SolidColor;

		// TODO: make these const and eliminate Bindable
		private const HEADER_HEIGHT:Number = 25;
		private const VOLUME_CHART_HEIGHT:Number = 50;
		private const RANGE_CHART_HEIGHT:Number = 80;
		private const RANGE_CHART_OVERLAP:Number = 1;
		private const SLIDER_SCROLL_BUTTON_WIDTH:Number = 16;
		private const FOOTER_HEIGHT:Number = 65;
		private const PADDING_BOTTOM:Number = 15;
		private const GROUP_BETWEEN_MAIN_RANGE_HEIGHT:Number = 15;

		private static const RANGE_SELECTOR_CONTAINER_VISIBLE_HEIGHT:int = 25;

		private static const RANGE_SELECTOR_CONTAINER_COLLAPSED_HEIGHT:int = 8;
		private const FOOTER_BUTTON_WIDTH:Number = 100;

		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			var topBorderVisible:Boolean = getStyle("topBorderVisible");

			if (topBorderLine.visible != topBorderVisible)
			{
				topBorderLine.visible = topBorderVisible;
			}
		}

		private function get traceEventsPrefix():String
		{
			return (this.parent as UIComponent).id + ".";
		}
		]]></fx:Script>
</s:SparkSkin>
