<?xml version="1.0"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:view="collaboRhythm.shared.bloodSolutesSimulation.view.*"
		 xmlns:view2="collaboRhythm.shared.view.*"
		 xmlns:hydrochlorothiazide="collaboRhythm.plugins.bloodPressure.view.simulation.levels.hydrochlorothiazide.*"
		 implements="collaboRhythm.plugins.bloodPressure.view.IBloodPressureWidgetView">
	<s:layout>
		<view2:ScaleToFitLayout unscaledWidth="160" aspectRatioMin="0.85" aspectRatioMax="1.25"/>
	</s:layout>
	<hydrochlorothiazide:HydrochlorothiazideSimulationView id="hydrochlorothiazideSimulationView"
												  width="100%" height="100%"/>

	<fx:Script>
		<![CDATA[
		import collaboRhythm.plugins.bloodPressure.controller.BloodPressureAppController;
		import collaboRhythm.plugins.schedule.shared.model.AdherencePerformanceModel;
		import collaboRhythm.shared.apps.bloodPressure.model.BloodPressureModel;

		import mx.events.PropertyChangeEvent;

		[Bindable]
		private var _model:BloodPressureModel;
		private var _currentPerformanceModel:AdherencePerformanceModel;

		public function get model():BloodPressureModel
		{
			return _model;
		}

		public function set model(value:BloodPressureModel):void
		{
			_model = value;
			refresh();

			_model.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, model_propertyChangeHandler);
		}

		public function set adherencePerformanceModel(currentPerformanceModel:AdherencePerformanceModel):void
		{
			_currentPerformanceModel = currentPerformanceModel;
		}

		public function get adherencePerformanceModel():AdherencePerformanceModel
		{
			return _currentPerformanceModel;
		}

		private function model_propertyChangeHandler(event:PropertyChangeEvent):void
		{
			refresh();
		}

		public function refresh():void
		{
			if (_model != null && _model.isAdherenceLoaded)
			{
				// TODO: update this to use the currentSimulation
				/*
				 var concentration:Number = 0;
				 if (_model.adherenceDataCollection != null && _model.adherenceDataCollection.length > 0)
				 {
				 var mostRecentConcentrationItem:Object = _model.adherenceDataCollection.getItemAt(_model.adherenceDataCollection.length - 1);
				 concentration = mostRecentConcentrationItem["concentration"];
				 }
				 hydrochlorothiazideSimulationView.concentration = concentration;
				 */
			}
		}

		public function set controller(controller:BloodPressureAppController):void
		{
		}
		]]>
	</fx:Script>
</s:Group>
