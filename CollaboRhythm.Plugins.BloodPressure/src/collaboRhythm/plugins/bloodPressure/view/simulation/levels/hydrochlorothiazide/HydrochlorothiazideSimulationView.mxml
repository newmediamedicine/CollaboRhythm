<?xml version="1.0"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<view:BloodSolutesSimulationView xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
								 xmlns:mx="library://ns.adobe.com/flex/mx"
								 xmlns:view="collaboRhythm.shared.bloodSolutesSimulation.view.*"
								 width="100%"
								 height="100%"
								 bloodAreaBackgroundColor="#0B5874"
								 backgroundVisible="false"
								 wallsVisible="false"
								 leftWallWidth="14"
								 rightWallWidth="14"
								 bloodAreaPercentWidth="{171.0 / 360}"
								 centerWallWidth="63"
								 isPlugCircular="true"
								 soluteWidth="16"
								 gapSize="40"
								 plugWidth="40"
								 soluteConcentration="0.1"
								 gapToWallRatio="0.66666667"
								 plugFillColor="#7593FB"
								 soluteFillColor1="#FB9C26"
								 soluteFillColor2="#3CC064"
								 isPlugBindingOnRight="true"
								 plugBindingOffsetX="10"
		>
	<view:backgroundContent>
		<s:Image
				width="100%"
				height="100%"
				source="@Embed('/assets/images/nephron.png')"
				smooth="true"
				scaleMode="stretch"
				skinClass="spark.skins.spark.ImageSkin"
				/>
	</view:backgroundContent>
	<fx:Script><![CDATA[
		import collaboRhythm.shared.apps.bloodPressure.model.SimulationModel;

		import mx.core.Application;
		import mx.core.FlexGlobals;
		import mx.events.FlexEvent;

		private var _concentration:Number;

		/**
		 * Concentration of hydrochlorothiazide in the blood.
		 */
		[Bindable]
		public function get concentration():Number
		{
			return _concentration;
		}

		public function set concentration(value:Number):void
		{
			_concentration = value;
			updateSimulation(value);
		}

		private function updateSimulation(concentration:Number):void
		{
			// TODO: hide simulation (?) when concentration is undefined; for now, treat undefined values as 0 concentration
			if (isNaN(concentration))
				concentration = 0;

			// limit the number of plugs to 2x the number of gaps
			this.plugRatio = Math.min(SimulationModel.maxPlugRatio,
									  concentration / SimulationModel.HYDROCHLOROTHIAZIDE_GOAL);

			this.soluteInBloodRatioAnimated = linearTransform(concentration, 0,
															  SimulationModel.HYDROCHLOROTHIAZIDE_GOAL, 0.95,
															  0.05);

//			// TODO: move the bloodAreaPercentWidth in a more appropriate way
//			this.bloodAreaPercentWidthAnimated = linearTransform(concentration, 0,
//																 SimulationModel.HYDROCHLOROTHIAZIDE_GOAL,
//																 0.6, 0.4);
		}

		private static function linearTransform(value:Number, min:Number, max:Number, min2:Number, max2:Number):Number
		{
			return min2 + percentOfRange(value, min, max) * (max2 - min2);
		}

		private static function percentOfRange(value:Number, min:Number, max:Number):Number
		{
			return Math.max(0, Math.min(1, (value - min) / (max - min)));
		}
		]]></fx:Script>
</view:BloodSolutesSimulationView>
