<?xml version="1.0"?>
		<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->

<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:views="collaboRhythm.plugins.diary.view.*"
		 width="100%" height="100%"
         creationComplete="creationCompleteHandler(event)">
    <fx:Script><![CDATA[
        import mx.events.FlexEvent;

        public var pass:Boolean = false;
        public var submit1:String;
        public var submit2:BitmapData;
        public var alertText:String = '';

        public function submit():void {
            pass = true;
            submit1 = dressingText.text;
            submit2 = cameraView._photoImage;
        }

        public function clear():void {
            pass = false;
            dressingText.text = '';
            cameraView.pictureText.text = '';
            submit1 = dressingText.text;
            if (cameraView._photoImage) {
                cameraView._photoImage.dispose();
            }
            cameraView.vid=null;
            cameraView.cam=null;
            cameraView.currentState = "cameraOffState";
            cameraView.pictureText.text = '';
            currentState = "defaultState";
        }

        private function creationCompleteHandler(event:FlexEvent):void {
            addEventListener(CameraEvent.CAMERA_ON, CameraOnState);
            addEventListener(CameraEvent.CAMERA_OFF, CameraOffState);

        }

        private function CameraOffState(event:CameraEvent):void {
            if (cameraView.pictureTaken) {

            }
            currentState = "defaultState";
        }

        private function CameraOnState(event:CameraEvent):void {
            currentState = "photoState";
        }
        ]]></fx:Script>
    <s:states>
        <s:State name="defaultState"/>
        <s:State name="photoState"/>
    </s:states>
    <s:VGroup height="100%" width="100%">
        <s:Group height.defaultState="41%" height.photoState="0%" width="100%">
                <s:BorderContainer height="95%" width="100%"
                                       cornerRadius="4" borderWeight="2"
                                       backgroundAlpha="0">
                    <s:RichEditableText id="dressingText" color="0x000000" text=""
                                        width="100%" height="100%"
                                        backgroundColor="0xffffff"
                                        paddingTop="5" fontSize="30"/>
                </s:BorderContainer>
        </s:Group>
        <s:HGroup height.defaultState="59%" height.photoState="100%" width="100%">
            <s:Group height="100%" width.defaultState="50%" width.photoState="100%">
                <views:CameraComponent id="cameraView" height="100%" width="100%"/>
            </s:Group>
            <s:Group height="100%" width.defaultState="50%" width.photoState="0%">
                <s:Spacer height.defaultState="100%" height.photoState="0%" width.photoState="0%" width.defaultState="100%"/>
            </s:Group>
        </s:HGroup>
    </s:VGroup>
</s:Group>